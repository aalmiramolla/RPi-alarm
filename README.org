# -*- mode:org; ispell-local-dictionary: "spanish" -*-
#+TITLE:     Alarma con Raspberry Pi
#+AUTHOR:    Almira Molla, Alejandro
#+EMAIL:     aalmiramolla@gmail.com
#+LANGUAGE:  es
#+STARTUP: content

* Introducción
En este proyecto se trata de hacer una alarma con un sensor de
ultrasonidos y un altavoz en la plataforma Raspberry Pi.

* Materiales
- Raspberry Pi
- Sensor de ultrasonidos HC-SR04
- Resistencias: 330Ω y 470Ω
- Cables
- Protoboard
- Altavoz externo (Jack 3.5)

* Esquema
#+CAPTION: (Credit: [[https://tutorials-raspberrypi.com/raspberry-pi-ultrasonic-sensor-hc-sr04/]])
#+NAME:   fig:wiring
[[./wiring.png]]

(Credit: [[https://tutorials-raspberrypi.com/raspberry-pi-ultrasonic-sensor-hc-sr04/]])

Faltaría conectar el altavoz externo a la salida de audio.

* Código
Para exportar el código hay que exportarlo con Emacs Org-Mode presionando las teclas =C-c C-v t=

Importamos las librerías GPIO, time y pygame, además inicializamos PyGame
#+BEGIN_SRC python :eval never :tangle "./alarma.py"
  #!/usr/bin/env python
  # coding: utf-8

  #Libraries
  import RPi.GPIO as GPIO
  import time
  import pygame

  pygame.init()
#+END_SRC
Se setea la Raspberry para que coja los pines en modo BCM y se setean
la posición y la dirección de los pines del sensor
#+BEGIN_SRC python :eval never :tangle "./alarma.py"
  #GPIO Mode (BOARD / BCM)
  GPIO.setmode(GPIO.BCM)
 
  #set GPIO Pins
  GPIO_TRIGGER = 18
  GPIO_ECHO = 24
 
  #set GPIO direction (IN / OUT)
  GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
  GPIO.setup(GPIO_ECHO, GPIO.IN)
 #+END_SRC
Se crea un método para calcular la distancia en cm.

La distancia es el tiempo que tarda en enviar la señal, rebotar y
volver al sensor. Se divide entre dos porque solo interesa desde el
rebote hasta que llega, o al contrario, desde que sale hasta que
rebota.
#+BEGIN_SRC python :eval never :tangle "./alarma.py"
  def distance():
      # set Trigger to HIGH
      GPIO.output(GPIO_TRIGGER, True)

      # set Trigger after 0.01ms to LOW
      time.sleep(0.00001)
      GPIO.output(GPIO_TRIGGER, False)

      start_time = time.time()
      stop_time = time.time()

      # save StartTime
      while GPIO.input(GPIO_ECHO) == 0:
          start_time = time.time()

      # save time of arrival
      while GPIO.input(GPIO_ECHO) == 1:
          stop_time = time.time()

      # time difference between start and arrival
      time_elapsed = stop_time - start_time
      # multiply with the sonic speed (34300 cm/s)
      # and divide by 2, because there and back
      distance = (time_elapsed * 34300) / 2

      return distance
 #+END_SRC

Creamos un bucle infinito en el que se comprueba la distancia del
objeto al sensor, si esta distancia es menor a 5 cm, hacemos sonar la
alarma.
 #+BEGIN_SRC python :eval never :tangle "./alarma.py"
   if __name__ == '__main__':
       while True:
           if distance() < 5: # cm
               # play sound
               pygame.mixer.music.load('r2-d2.wav')
               pygame.mixer.music.play()
           time.sleep(0.5)

 #+END_SRC
